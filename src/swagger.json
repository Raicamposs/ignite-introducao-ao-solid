{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Ignite  - Chapter II ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "raianejanu@gmail.com",
      "name": "Raiane Campos",
      "url": "https://www.linkedin.com/in/raiane-campos-6a225b80/"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Documentation of Challenge 01 - Introduction to SOLID"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "Receive `name`, and `email` inside the request body and register a user.",
        "operationId": "createUser",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/AlreadyExist"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/UserBody"
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "description": "Receives, by the request header, a `user_id` property containing the user id and returns a list with all registered users. The list is returned only if the user is admin.",
        "operationId": "findUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/admId"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Receives, in the parameters, the `user_id ` of a user and returns the information of the found user"
      }
    },
    "/users/{user_id}/admin": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Makes an admin user",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Receive, in the parameters, the `user_id `  of a user and transform that user into admin."
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "admin": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NewUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      }
    },
    "parameters": {
      "userId": {
        "in": "path",
        "name": "user_id",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the user"
      },
      "admId": {
        "in": "header",
        "name": "user_id",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "ID of the adm"
      }
    },
    "requestBodies": {
      "UserBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewUser"
            }
          }
        }
      }
    },
    "responses": {
      "AlreadyExist": {
        "description": "The specified user already exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified user was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}